// Code generated by MockGen. DO NOT EDIT.
// Source: cipher/cipher.go

// Package mock_cipher is a generated GoMock package.
package mock_cipher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStreamCipherBlock is a mock of StreamCipherBlock interface.
type MockStreamCipherBlock struct {
	ctrl     *gomock.Controller
	recorder *MockStreamCipherBlockMockRecorder
}

// MockStreamCipherBlockMockRecorder is the mock recorder for MockStreamCipherBlock.
type MockStreamCipherBlockMockRecorder struct {
	mock *MockStreamCipherBlock
}

// NewMockStreamCipherBlock creates a new mock instance.
func NewMockStreamCipherBlock(ctrl *gomock.Controller) *MockStreamCipherBlock {
	mock := &MockStreamCipherBlock{ctrl: ctrl}
	mock.recorder = &MockStreamCipherBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamCipherBlock) EXPECT() *MockStreamCipherBlockMockRecorder {
	return m.recorder
}

// DecryptBit mocks base method.
func (m *MockStreamCipherBlock) DecryptBit(bit uint8) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptBit", bit)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptBit indicates an expected call of DecryptBit.
func (mr *MockStreamCipherBlockMockRecorder) DecryptBit(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptBit", reflect.TypeOf((*MockStreamCipherBlock)(nil).DecryptBit), bit)
}

// EncryptBit mocks base method.
func (m *MockStreamCipherBlock) EncryptBit(bit uint8) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptBit", bit)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptBit indicates an expected call of EncryptBit.
func (mr *MockStreamCipherBlockMockRecorder) EncryptBit(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptBit", reflect.TypeOf((*MockStreamCipherBlock)(nil).EncryptBit), bit)
}

// Seek mocks base method.
func (m *MockStreamCipherBlock) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockStreamCipherBlockMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockStreamCipherBlock)(nil).Seek), offset, whence)
}

// MockBlock is a mock of Block interface.
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock.
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance.
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// BlockSize mocks base method.
func (m *MockBlock) BlockSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// BlockSize indicates an expected call of BlockSize.
func (mr *MockBlockMockRecorder) BlockSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSize", reflect.TypeOf((*MockBlock)(nil).BlockSize))
}

// Decrypt mocks base method.
func (m *MockBlock) Decrypt(dst, src []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Decrypt", dst, src)
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockBlockMockRecorder) Decrypt(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockBlock)(nil).Decrypt), dst, src)
}

// Encrypt mocks base method.
func (m *MockBlock) Encrypt(dst, src []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Encrypt", dst, src)
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockBlockMockRecorder) Encrypt(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockBlock)(nil).Encrypt), dst, src)
}
