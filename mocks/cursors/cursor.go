// Code generated by MockGen. DO NOT EDIT.
// Source: cursors/cursor.go

// Package mock_cursors is a generated GoMock package.
package mock_cursors

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCursor) Read(payload []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", payload)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCursorMockRecorder) Read(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCursor)(nil).Read), payload)
}

// ReadBit mocks base method.
func (m *MockCursor) ReadBit() (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBit")
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBit indicates an expected call of ReadBit.
func (mr *MockCursorMockRecorder) ReadBit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBit", reflect.TypeOf((*MockCursor)(nil).ReadBit))
}

// Seek mocks base method.
func (m *MockCursor) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockCursorMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockCursor)(nil).Seek), offset, whence)
}

// Write mocks base method.
func (m *MockCursor) Write(payload []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", payload)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockCursorMockRecorder) Write(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCursor)(nil).Write), payload)
}

// WriteBit mocks base method.
func (m *MockCursor) WriteBit(bit uint8) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBit", bit)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteBit indicates an expected call of WriteBit.
func (mr *MockCursorMockRecorder) WriteBit(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBit", reflect.TypeOf((*MockCursor)(nil).WriteBit), bit)
}
